List operations:
Operation 1: Adding elements to List class using add() method
Operation 2: Updating elements in List class using set() method
Operation 3: Searching for elements using indexOf(), lastIndexOf methods
Operation 4: Removing elements using remove() method
Operation 5: Accessing Elements in List class using get() method
Operation 6: Checking if an element is present in the List class using contains() method



Set operations:

Adding elements
Accessing elements
Removing elements
Iterating elements


Other operations
Union:This operation adds all the elements in one set with the other.
create two sets:
Set<Integer> a = new HashSet<>();
a.addAll(Arrays.asList(
            new Integer[] { 1, 3, 2, 4, 8, 9, 0 }));
            
Set<Integer> b =  new HashSet<>();
b.addAll(Arrays.asList(
            new Integer[] { 1, 3, 7, 5, 4, 0, 7, 5 }));
            
Set<Integer> union = new HashSet<>(a);
union.addAll(b);

Intersection:This operation returns all the common elements from the given two sets.
Set<Integer> intersection = new HashSet<>(a);
intersection.retainAll(b);

Difference :This operation removes all the values present in one set from the other set.
Set<Integer> difference = new HashSet<>(a);
difference.removeAll(b);


Queue interface:
add(element): Adds an element to the rear of the queue. If the queue is full, it throws an exception.

offer(element): Adds an element to the rear of the queue. If the queue is full, it returns false.

remove(): Removes and returns the element at the front of the queue. If the queue is empty, it throws an exception.

poll(): Removes and returns the element at the front of the queue. If the queue is empty, it returns null.

element(): Returns the element at the front of the queue without removing it. If the queue is empty, it throws an exception.

peek(): Returns the element at the front of the queue without removing it. If the queue is empty, it returns null.